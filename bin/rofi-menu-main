#!/bin/bash

# Main rofi menu system for Hyprland
# Provides access to apps, config files, fonts, system controls, and learning resources

# Global flag to determine if "back" should exit the script
FONT_CACHE="$XDG_CACHE_HOME/rofi-font-list"
CACHE_EXPIRY=3600
BACK_TO_EXIT=false

# Retrieves a cached list of fonts, or regenerates the cache
get_fonts() {
  # If cache exists and is recent, use it; else regenerate
  if [[ -f "$FONT_CACHE" ]]; then
    now=$(date +%s)
    mod=$(date +%s -r "$FONT_CACHE")
    age=$((now - mod))
    if ((age < CACHE_EXPIRY)); then
      mapfile -t fonts <"$FONT_CACHE"
      return
    fi
  fi

  # Regenerate cache
  font-list >"$FONT_CACHE"
  mapfile -t fonts <"$FONT_CACHE"
}

# Check if a command exists, otherwise print error and exit
require_command() {
  local cmd="$1"
  if ! command -v "$cmd" &>/dev/null; then
    notify-send "Error: $cmd not found"
    exit 1
  fi
}

# Navigate back to parent menu or exit
# Args:
#   $1 - Parent menu function name to call
back_to() {
  local parent_menu="$1"

  if [[ "$BACK_TO_EXIT" == "true" ]]; then
    exit 0
  elif [[ -n "$parent_menu" ]]; then
    "$parent_menu"
  else
    show_main_menu
  fi
}

# Display a rofi menu with dynamic options
# Args:
#   $1 - Prompt text
#   $2 - Array length (number of menu options)
#   $@ - Menu options array, followed by extra args and preselect option
# Returns:
#   Selected menu item via stdout
menu() {
  local prompt="$1"
  local array_length="$2"
  shift 2
  local options=("${@:1:$array_length}")

  shift "$array_length"

  local extra="$1"     # Additional rofi arguments
  local preselect="$2" # Option to preslect by default
  local current_length=0
  local max_length=0
  local args=()

  # Parse extra arguments into array
  read -r -a args <<<"$extra"

  # Calculate maximum option length for window sizing
  for item in "${options[@]}"; do
    current_length=${#item}

    if [[ current_length -gt max_length ]]; then
      max_length=$current_length
    fi
  done

  # If preselect is specified, find its index and add to args
  if [[ -n "$preselect" ]]; then
    local index
    index=$(printf '%s\n' "${options[@]}" | grep -nxF "$preselect" | cut -d: -f1)
    if [[ -n "$index" ]]; then
      args+=("-selected-row" "$((index - 1))")
    fi
  fi

  # Display rofi menu with dynamic sizing
  printf '%s\n' "${options[@]}" | rofi -dmenu \
    -p "$prompt" "${args[@]}" \
    -lines "$array_length" \
    -no-fixed-num-lines \
    -theme-str "window { width: ${max_length}em;} listview {scrollbar: false;}"
}

# Open a config file in the default editor
# Args:
#   $1 - Path to config file
open_in_editor() {
  require_command "launch-editor"
  notify-send "Editing config file" "$1"
  launch-editor "$1"
}

# Execute system commands (shutdown, reboot, suspend, etc.) with confirmation
# Args:
#   $1 - Command flag (--shutdown, --reboot, --suspend, --sleep, --logout)
run_cmd() {
  selected="$(confirm_exit)"
  if [[ "$selected" == "Yes" ]]; then
    if [[ $1 == '--shutdown' ]]; then
      systemctl poweroff
    elif [[ $1 == '--reboot' ]]; then
      systemctl reboot
    elif [[ $1 == '--suspend' ]]; then
      systemctl suspend
    elif [[ $1 == '-sleep' ]]; then
      systemctl suspend
    elif [[ $1 == '--logout' ]]; then
      hyprctl dispatch exit
    fi
  else
    exit 0
  fi
}

# Show Yes/No confirmation dialog
# Returns:
#   "Yes" or "No" via stdout
confirm_exit() {
  echo -e "Yes\nNo" | confirm_cmd
}

# Display a centered confirmation dialog with Yes/No options
# Reads options from stdin
# Returns:
#   Selected option via stdout
confirm_cmd() {
  rofi -theme-str 'window {location: center; anchor: center; fullscreen: false; width: 250px;}' \
    -theme-str 'mainbox {children: [ "message", "listview" ];}' \
    -theme-str 'listview {columns: 2; lines: 1;}' \
    -theme-str 'element-text {horizontal-align: 0.5;}' \
    -theme-str 'textbox {horizontal-align: 0.5;}' \
    -dmenu \
    -p 'Confirmation' \
    -mesg 'Are you Sure?'
}

# System menu: Lock, Suspend, Logout, Sleep, Reboot, Shutdown
show_system_menu() {
  local options=(" Lock" " Suspend" "󰈆 Logout" "󰤄 Sleep" " Reboot" "󰐥 Shutdown")
  case $(menu "Select" "${#options[@]}" "${options[@]}") in
  *Lock*) Lock ;;
  *Suspend*) run_cmd --suspend ;;
  *Log*) run_cmd --logout ;;
  *Sleep*) run_cmd --sleep ;;
  *Reboot*) run_cmd --reboot ;;
  *Shut*) run_cmd --shutdown ;;
  *) show_main_menu ;;
  esac
}

config_menu_items=(
  " Hyprland:$XDG_CONFIG_HOME/hypr/hyprland.conf"
  " Hypridle:$XDG_CONFIG_HOME/hypr/hypridle.conf"
  " Rofi:$XDG_CONFIG_HOME/rofi/config.rasi"
  " Zsh:$XDG_CONFIG_HOME/zsh/.zshrc"
  " Alacritty:$XDG_CONFIG_HOME/alacritty/alacritty.toml"
  " Waybar:$XDG_CONFIG_HOME/waybar/config.jsonc"
  " Dunst:$XDG_CONFIG_HOME/dunst/dunstrc"
)

# Config menu: Edit various configuration files
show_config_menu() {
  local options=()
  for item in "${config_menu_items[@]}"; do
    options+=("${item%%:*}") # Get display name with icon
  done
  options+=(" Back")

  local choice
  choice=$(menu "Edit config" "${#options[@]}" "${options[@]}")
  if [[ "$choice" == " Back" || -z "$choice" ]]; then
    show_main_menu
    return
  fi

  for item in "${config_menu_items[@]}"; do
    name="${item%%:*}"
    path="${item#*:}"
    if [[ "$name" == "$choice" ]]; then
      open_in_editor "$path"
      return
    fi
  done
}

# Font menu: Select and apply system fonts
show_font_menu() {
  require_command "font-list"
  require_command "font-set"
  require_command "font-current"
  # Get available fonts from external script
  get_fonts
  local options=("${fonts[@]}" "󰑐 Refresh Font List" " Back")
  theme=$(menu "Font" "${#options[@]}" "${options[@]}" "" "$(font-current)")
  case "$theme" in
  "󰑐 Refresh Font List")
    rm -f "$FONT_CACHE"
    show_font_menu
    ;;
  " Back" | "CNCLD" | "")
    back_to show_main_menu
    ;;
  *)
    font-set "$theme"
    ;;
  esac
}

# Learn menu: Quick access to documentation and wikis
show_learn_menu() {
  local options=(" Keybindings" " Hyprland" "󰣇  Arch" "  Neovim")
  case $(menu "Learn" "${#options[@]}" "${options[@]}") in
  *Keybindings*) rofi-menu-keybindings ;;
  *Hyprland*) launch-webapp "https://wiki.hypr.land/" ;;
  *Arch*) launch-webapp "https://wiki.archlinux.org/title/Main_page" ;;
  *Neovim*) launch-webapp "https://www.lazyvim.org/keymaps" ;;
  *) show_main_menu ;;
  esac
}

# Main menu: Top-level menu with access to all submenus
show_main_menu() {
  local options=("󰀻 Apps" " Config" " Font" " System" "󰧑 Learn")
  case $(menu "Go" "${#options[@]}" "${options[@]}") in
  *Apps*) rofi -show drun ;;
  *Config*) show_config_menu ;;
  *Font*) show_font_menu ;;
  *System*) show_system_menu ;;
  *Learn*) show_learn_menu ;;
  esac
}

require_command "notify-send"
require_command "rofi"
require_command "launch-webapp"
# Start the menu system
show_main_menu
