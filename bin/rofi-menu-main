#!/bin/bash
# rofi-menu-main
#
# A comprehensive Rofi-based menu system for Hyprland.
#
# This script provides a central menu with access to various sub-menus for:
# - Launching applications
# - Editing configuration files
# - Changing themes and fonts
# - System power controls (shutdown, reboot, etc.)
# - Accessing learning resources (wikis, keybindings)
# - Taking screenshots
# - Toggling system components (Waybar, Hypridle)
#
# The menu is built using Rofi and is designed to be easily extensible.
#
# Dependencies:
# - rofi
# - notify-send
# - And several custom scripts from this `bin` directory.

set -euo pipefail

# --- Global Variables and Constants ---

# Cache file for the font list to improve performance.
FONT_CACHE="$XDG_CACHE_HOME/rofi-font-list"
# Cache expiry time in seconds (1 hour).
CACHE_EXPIRY=3600
# A flag to control the behavior of the "back" action.
BACK_TO_EXIT=false

# --- Font Cache Management ---

# Retrieves a cached list of fonts, or regenerates the cache if it's old or missing.
get_fonts() {
  # If the cache file exists and is not older than CACHE_EXPIRY, use it.
  if [[ -f "$FONT_CACHE" ]]; then
    now=$(date +%s)
    mod=$(date +%s -r "$FONT_CACHE")
    age=$((now - mod))
    if ((age < CACHE_EXPIRY)); then
      mapfile -t fonts <"$FONT_CACHE"
      return
    fi
  fi

  # Regenerate the font cache by calling the `font-list` script.
  font-list >"$FONT_CACHE"
  mapfile -t fonts <"$FONT_CACHE"
}

# --- Utility Functions ---

# Checks if a command exists on the system. If not, it sends a notification and exits.
# Args:
#   $1 - The name of the command to check.
require_command() {
  local cmd="$1"
  if ! command -v "$cmd" &>/dev/null; then
    notify-send "Error: $cmd not found"
    exit 1
  fi
}

# Navigates back to a parent menu or exits the script.
# The behavior is controlled by the global BACK_TO_EXIT flag.
# Args:
#   $1 - The name of the parent menu function to call.
back_to() {
  local parent_menu="$1"

  if [[ "$BACK_TO_EXIT" == "true" ]]; then
    exit 0
  elif [[ -n "$parent_menu" ]]; then
    "$parent_menu"
  else
    show_main_menu
  fi
}

# --- Rofi Menu Functions ---

# A generic function to display a Rofi menu with dynamic options.
# It calculates the window size based on the content and handles pre-selection.
# Args:
#   $1 - The prompt text for the Rofi menu.
#   $2 - The length of the options array.
#   $@ - The array of menu options, followed by extra Rofi arguments and a pre-select option.
# Returns:
#   The selected menu item via stdout.
menu() {
  local prompt="$1"
  local array_length="$2"
  shift 2
  local options=("${@:1:$array_length}")

  shift "$array_length"

  local extra="${1:-}"     # Additional rofi arguments
  local preselect="${2:-}" # Option to preselect by default
  local current_length=0
  local max_length=0
  local args=()

  # Parse extra arguments into an array.
  read -r -a args <<<"$extra"

  # Calculate the maximum option length for dynamic window sizing.
  for item in "${options[@]}"; do
    current_length=${#item}

    if [[ $current_length -gt $max_length ]]; then
      max_length=$current_length
    fi
  done

  # If a pre-select option is provided, find its index and add it to the Rofi arguments.
  if [[ -n "$preselect" ]]; then
    local index
    index=$(printf '%s\n' "${options[@]}" | grep -nxF "$preselect" | cut -d: -f1)
    if [[ -n "$index" ]]; then
      args+=("-selected-row" "$((index - 1))")
    fi
  fi

  # Display the Rofi menu.
  printf '%s\n' "${options[@]}" | rofi -dmenu \
    -p "$prompt" "${args[@]}" \
    -lines "$array_length" \
    -no-fixed-num-lines \
    -theme-str "window { width: $max_length em;} listview {scrollbar: false;}"
}

# --- Action Functions ---

# Opens a configuration file in the default editor.
# Args:
#   $1 - The path to the configuration file.
open_in_editor() {
  notify-send "Editing config file" "$1"
  launch-editor "$1"
}

# Executes system commands (shutdown, reboot, etc.) after a confirmation dialog.
# Args:
#   $1 - The command to execute (e.g., --shutdown, --reboot).
run_cmd() {
  selection="$(confirm_exit)"
  if [[ "$selection" == "Yes" ]]; then
    if [[ $1 == '--shutdown' ]]; then
      systemctl poweroff
    elif [[ $1 == '--reboot' ]]; then
      systemctl reboot
    elif [[ $1 == '--suspend' ]]; then
      systemctl suspend
    elif [[ $1 == '--sleep' ]]; then
      systemctl suspend
    elif [[ $1 == '--logout' ]]; then
      hyprctl dispatch exit
    fi
  else
    exit 0
  fi
}

# --- Confirmation Dialogs ---

# Shows a simple Yes/No confirmation dialog.
# Returns:
#   "Yes" or "No" via stdout.
confirm_exit() {
  echo -e "Yes\nNo" | confirm_cmd
}

# A generic, centered confirmation dialog with customizable options.
# Reads the options from stdin.
# Returns:
#   The selected option via stdout.
confirm_cmd() {
  rofi -theme-str 'window {location: center; anchor: center; fullscreen: false; width: 250px;}' \
    -theme-str 'mainbox {children: [ "message", "listview" ];}' \
    -theme-str 'listview {columns: 2; lines: 1;}' \
    -theme-str 'element-text {horizontal-align: 0.5;}' \
    -theme-str 'textbox {horizontal-align: 0.5;}' \
    -dmenu \
    -p 'Confirmation' \
    -mesg 'Are you Sure?'
}

# --- Sub-menus ---

# System menu: Lock, Suspend, Logout, Sleep, Reboot, Shutdown.
show_system_menu() {
  local options=(" Lock" " Suspend" "󰈆 Logout" "󰤄 Sleep" " Reboot" "󰐥 Shutdown")
  case $(menu "Select" "${#options[@]}" "${options[@]}") in
  *Lock*) loginctl lock-session ;;
  *Suspend*) run_cmd --suspend ;;
  *Log*) run_cmd --logout ;;
  *Sleep*) run_cmd --sleep ;;
  *Reboot*) run_cmd --reboot ;;
  *Shut*) run_cmd --shutdown ;;
  *) show_main_menu ;;
  esac
}

# Config menu: Edit various configuration files.
show_config_menu() {

  local config_menu_items=(
    " Hyprland:$XDG_CONFIG_HOME/hypr/hyprland.conf"
    " Hypridle:$XDG_CONFIG_HOME/hypr/hypridle.conf"
    " Rofi:$XDG_CONFIG_HOME/rofi/config.rasi"
    " Zsh:$XDG_CONFIG_HOME/zsh/.zshrc"
    " Alacritty:$XDG_CONFIG_HOME/alacritty/alacritty.toml"
    " Waybar:$XDG_CONFIG_HOME/waybar/config.jsonc"
    " Dunst:$XDG_CONFIG_HOME/dunst/dunstrc"
  )

  local options=()
  for item in "${config_menu_items[@]}"; do
    options+=("${item%%:*}") # Extract the display name with icon.
  done
  options+=(" Back")

  local selection
  selection=$(menu "Edit config" "${#options[@]}" "${options[@]}")
  if [[ "$selection" == " Back" || -z "$choice" ]]; then
    show_main_menu
    return
  fi

  # Find the selected item and open its corresponding file.
  for item in "${config_menu_items[@]}"; do
    name="${item%%:*}"
    path="${item#*:}"
    if [[ "$name" == "$selection" ]]; then
      open_in_editor "$path"
      return
    fi
  done
}

# Theme menu: Select and apply a system theme.
show_theme_menu() {
  mapfile -t themes < <(theme-list)
  local selection
  local options=("${themes[@]}")
  selection=$(menu "Theme" "${#options[@]}" "${options[@]}" "" "$(theme-current)")
  case "$selection" in
  " Back" | "CNCLD" | "")
    back_to show_main_menu
    ;;
  *)
    theme-set "$selection"
    ;;
  esac
}
# Font menu: Select and apply a system font.
show_font_menu() {
  # Get available fonts from external script
  get_fonts
  local options=("${fonts[@]}" "󰑐 Refresh Font List" " Back")
  local selection
  selection=$(menu "Font" "${#options[@]}" "${options[@]}" "" "$(font-current)")
  case "$selection" in
  "󰑐 Refresh Font List")
    rm -f "$FONT_CACHE"
    show_font_menu
    ;;
  " Back" | "CNCLD" | "")
    back_to show_main_menu
    ;;
  *)
    font-set "$selection"
    ;;
  esac
}

# Screenshot menu: Take a screenshot of a region, window, or display.
show_screenshot_menu() {
  local options=("  Region" "  Window" "  Display")
  case $(menu "Screenshot" "${#options[@]}" "${options[@]}") in
  *Region*) cmd-screenshot ;;
  *Window*) cmd-screenshot window ;;
  *Display*) cmd-screenshot output ;;
  *) show_main_menu ;;
  esac
}

# Learn menu: Quick access to documentation and wikis.
show_learn_menu() {
  local options=(" Keybindings" " Hyprland" "󰣇  Arch" "  Neovim")
  case $(menu "Learn" "${#options[@]}" "${options[@]}") in
  *Keybindings*) rofi-menu-keybindings ;;
  *Hyprland*) launch-webapp "https://wiki.hypr.land/" ;;
  *Arch*) launch-webapp "https://wiki.archlinux.org/title/Main_page" ;;
  *Neovim*) launch-webapp "https://www.lazyvim.org/keymaps" ;;
  *) show_main_menu ;;
  esac
}

# Toggle menu: Toggle system components like Waybar or Hypridle.
show_toggle_menu() {
  local options=("󰍜 Toggle waybar" "󱫖 Toggle hypridle")
  case $(menu "Toggle" "${#options[@]}" "${options[@]}") in
  *waybar*) toggle-waybar ;;
  *hypridle*) toggle-idle ;;
  *) show_main_menu ;;
  esac
}

# --- Main Menu ---

# The main menu, which is the entry point to all other sub-menus.
show_main_menu() {
  local options=("󰀻 Apps" " Config" " Font" " System" "󰧑 Learn" "󰸌 Theme" "  Screenshot" "󰔎  Toggle")
  case $(menu "Go" "${#options[@]}" "${options[@]}") in
  *Apps*) rofi -show drun ;;
  *Config*) show_config_menu ;;
  *Font*) show_font_menu ;;
  *System*) show_system_menu ;;
  *Learn*) show_learn_menu ;;
  *Theme*) show_theme_menu ;;
  *Screenshot*) show_screenshot_menu ;;
  *Toggle*) show_toggle_menu ;;
  esac
}

# --- Script Initialization ---

# Check for all required commands at startup to ensure the script can run correctly.
require_command "notify-send"
require_command "rofi"
require_command "launch-webapp"
require_command "launch-editor"
require_command "theme-list"
require_command "theme-current"
require_command "theme-set"
require_command "font-list"
require_command "font-set"
require_command "font-current"
require_command "rofi-menu-keybindings"
require_command "cmd-screenshot"

# Start the menu system by showing the main menu.
show_main_menu

