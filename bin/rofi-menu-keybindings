#!/bin/bash

# rofi-menu-keybindings
#
# A script to display Hyprland keybindings in an interactive Rofi menu.
#
# This script fetches keybindings from Hyprland, formats them for readability,
# and displays them in a searchable Rofi menu. It's useful for quickly
# looking up keybindings without having to open the configuration file.
#
# Dependencies:
# - rofi: For the interactive menu.
# - hyprctl: To get the keybindings from Hyprland.
# - jq: To parse the JSON output from hyprctl.
# - awk: For advanced text processing and formatting.
# - sed: For simple text substitutions.

# Fetches dynamic keybindings from Hyprland and performs initial processing.
#
# The output is a comma-separated list of bindings with the following format:
# MODIFIERS,KEY,DESCRIPTION,DISPATCHER,ARG
dynamic_bindings() {
  hyprctl -j binds |
    jq -r '.[] | {modmask, key, keycode, description, dispatcher, arg} | "\(.modmask),\(.key)@\(.keycode),\(.description),\(.dispatcher),\(.arg)"' |
    sed -r \
      -e 's/null//' \
      -e 's,uwsm app -- ,,' \
      -e 's/@0//' \
      -e 's/,@/,code:/' \
      # The following lines replace the numeric modifier mask with a human-readable string.
      # The numbers correspond to the bitmask used by Hyprland.
      -e 's/^0,/,/' \
      -e 's/^1,/SHIFT,/' \
      -e 's/^4,/CTRL,/' \
      -e 's/^5,/SHIFT CTRL,/' \
      -e 's/^8,/ALT,/' \
      -e 's/^9,/SHIFT ALT,/' \
      -e 's/^12,/CTRL ALT,/' \
      -e 's/^13,/SHIFT CTRL ALT,/' \
      -e 's/^64,/SUPER,/' \
      -e 's/^65,/SUPER SHIFT,/' \
      -e 's/^68,/SUPER CTRL,/' \
      -e 's/^69,/SUPER SHIFT CTRL,/' \
      -e 's/^72,/SUPER ALT,/' \
      -e 's/^73,/SUPER SHIFT ALT,/' \
      -e 's/^76,/SUPER CTRL ALT,/' \
      -e 's/^77,/SUPER SHIFT CTRL ALT,/'
}

# Parses and formats the keybindings for display in Rofi.
#
# `awk` does the heavy lifting:
# - Sets the field separator to a comma ','.
# - Joins the key combination (e.g., "SUPER + Q").
# - Joins the command that the key executes.
# - Prints everything in a nicely aligned format.
parse_bindings() {
  awk -F, '\
{ 
    # Combine the modifier and key (first two fields)
    key_combo = $1 " + " $2;

    # Clean up: strip leading "+" if present, and trim whitespace.
    gsub(/^[ \t]*\+?[ \t]*/, "", key_combo);
    gsub(/[ \t]+$/, "", key_combo);

    # Use the description field if it's available.
    action = $3;

    if (action == "") {
        # If no description, reconstruct the command from the dispatcher and argument.
        for (i = 4; i <= NF; i++) {
            action = action $i (i < NF ? "," : "");
        }

        # Clean up the reconstructed action string.
        sub(/,$/, "", action); # Remove trailing comma.
        gsub(/(^|,)[[:space:]]*exec[[:space:]]*,?/, "", action); # Remove "exec," prefix.
        gsub(/^[ \t]+|[ \t]+$/, "", action); # Trim whitespace.
        gsub(/[ \t]+/, " ", key_combo);  # Collapse multiple spaces in key_combo.

        # Escape XML entities for Rofi's pango markup.
        gsub(/&/, "\\&amp;", action);
        gsub(/</, "\\&lt;", action);
        gsub(/>/, "\\&gt;", action);
        gsub(/"/, "\\&quot;", action);
        gsub(/'"'"'/, "\\&apos;", action);
    }

    # Print the formatted keybinding if the action is not empty.
    if (action != "") {
        printf "% -35s â†’ %s\n", key_combo, action;
    }
}'
}

# Calculate the height of the Rofi menu to be 60% of the focused monitor's height.
monitor_height=$(hyprctl monitors -j | jq -r '.[] | select(.focused == true) | .height')
menu_height=$((monitor_height * 60 / 100))

# The main pipeline:
# 1. Get the bindings from Hyprland.
# 2. Sort and remove duplicates.
# 3. Parse and format the bindings.
# 4. Display the bindings in a Rofi menu.
dynamic_bindings |
  sort -u |
  parse_bindings |
  rofi -dmenu -p 'Keybindings' -theme-str "window {height: $menu_height px ;}"