#!/usr/bin/env ruby

# frozen_string_literal: true

require 'open3'

# Version 0.1
# September 2021
#
# A small group of command line utilites to update the aur files contained in
# the ~/Code/ directory.  It started out as what seemed to be a fairly
# straightforward little command line app and gradually grew as I started to
# discover multi threaded and Open3, so it quickly evolved to a competely
# different animal.  The current plan is to complete the development of it,
# then I think create a Gem where the code is slightly more organized, followed
# by trying to port this over to maybe a node app, then a rust app.
class Threaded
  Aur = Struct.new(:name, :git_url, :remote_reachable, :up_to_date)
  GitMessage = Struct.new(:output, :error, :status)

  def escape(string)
    string && string.to_s.gsub('\'', '\'"\'"\'').to_s
  end

  def status(dir, command)
    opts = []
    opts << "--git-dir=#{dir}/.git"
    opts << "--work-tree=#{dir}"
    opts = opts.flatten.map { |s| escape(s) }.join(' ')

    stdout, stderr, status =
      Open3.capture3("git #{opts} #{command}")
    GitMessage.new(stdout.chomp, stderr, status)
  end

  def up_to_date?
    "rev-list --right-only --count HEAD...@'{u}'"
  end

  def git_remote
    'remote get-url origin'
  end

  def remote_reachable?
    'ls-remote --exit-code'
  end

  def packages
    @packages ||= Dir['*/PKGBUILD'].map { |pkg| pkg.gsub('/PKGBUILD', '') }
                                   .map { |x| [x, Aur.new] }.to_h.sort
  end

  def build_package_information(directory, git_info)
    git_info.name = directory
    git_info.up_to_date = status(directory, up_to_date?).output.to_i.zero?
    git_info.git_url = status(directory, git_remote).output
    git_info.remote_reachable = status(directory, remote_reachable?).status.success?
  end

  def show_status
    packages.each do |pkg|
      package_name = pkg[0]
      package_status = pkg[1]
      if package_status.up_to_date
        puts "#{package_name} \e[32m (up to date) \e[0m"
      end
    end
  end

  def run
    threads = []
    packages.each do |pkg|
      threads << Thread.new do
        build_package_information(pkg[0], pkg[1])
      end
    end
    threads.each(&:join)
    show_status
  end
end

Threaded.new.run
